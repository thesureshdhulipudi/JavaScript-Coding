import React, { useState, useEffect, useRef } from 'react';
import Joyride from 'react-joyride';

const TourComponent = () => {
  const [isTourActive, setIsTourActive] = useState(false);
  const [highlightedArea, setHighlightedArea] = useState({});
  const currentStepIndex = useRef(0);

  const steps = [
    {
      target: '[data-tour-id="first-step"]',
      content: 'This is the first step.',
      disableBeacon: true,
    },
    {
      target: '[data-tour-id="second-step"]',
      content: 'This is the second step.',
      disableBeacon: true,
    },
    // Add more steps as needed
  ];

  const handleJoyrideCallback = (data) => {
    const { status, type, index } = data;

    if (type === 'step:before' || type === 'step:after') {
      currentStepIndex.current = index;
      updateHighlightedArea();
    }

    if (status === 'finished' || status === 'skipped') {
      setIsTourActive(false);
      removeOverlay();
    }
  };

const scrollToElement = ({ selector, offset = 0, behavior = 'smooth' }) => {
    const element = document.querySelector(selector);
    if (element) {
      const elementPosition = element.getBoundingClientRect().top + window.pageYOffset - offset;
      window.scrollTo({
        top: elementPosition,
        behavior: behavior
      });
    }
  };
if (type === 'step:after') {
      scrollToElement({
        selector: step.target, // Use the target from the step
        offset: 50, // Optional: Adjust this based on your design
        behavior: 'smooth'
      });
    }

  const updateHighlightedArea = () => {
    const element = document.querySelector(steps[currentStepIndex.current].target);

    if (element) {
      const rect = element.getBoundingClientRect();
      setHighlightedArea({
        top: rect.top,
        left: rect.left,
        width: rect.width,
        height: rect.height,
      });
    }
  };

  const removeOverlay = () => {
    setHighlightedArea({});
  };

  useEffect(() => {
    if (isTourActive) {
      updateHighlightedArea();
    }
  }, [isTourActive]);

  const startTour = () => {
    setIsTourActive(true);
  };

  return (
    <>
      <button onClick={startTour}>Start Tour</button>

      {isTourActive && (
        <Joyride
          steps={steps}
          continuous={true}
          showSkipButton={true}
          showProgress={true}
          callback={handleJoyrideCallback}
          disableOverlay={true} // Disable the default overlay
        />
      )}

      {isTourActive && (
        <>
          <div style={{ ...overlayBaseStyles, top: 0, height: highlightedArea.top }} />
          <div style={{ ...overlayBaseStyles, top: highlightedArea.top, height: highlightedArea.height, width: highlightedArea.left }} />
          <div style={{ ...overlayBaseStyles, top: highlightedArea.top, left: highlightedArea.left + highlightedArea.width, height: highlightedArea.height }} />
          <div style={{ ...overlayBaseStyles, top: highlightedArea.top + highlightedArea.height, height: `calc(100% - ${highlightedArea.top + highlightedArea.height}px)` }} />
        </>
      )}
    </>
  );
};

const highlightedAreaStyles = {
  position: 'absolute',
  zIndex: 9999, // Ensure it's above the overlay
  pointerEvents: 'none', // Allow clicks through the overlay
  boxShadow: '0 0 10px 5px rgba(255, 255, 255, 0.5)', // Optional highlight effect
  borderRadius: '4px',
  backgroundColor: '#fff', // To show the highlight clearly
};

// Overlay styles to cover the entire screen
const overlayBaseStyles = {
  position: 'fixed',
  backgroundColor: 'rgba(0, 0, 0, 0.5)', // Adjust as needed
  zIndex: 9999, // Ensure it's above other elements
  width: '100%',
  left: 0,
  pointerEvents: 'auto', // Allow the overlay to capture clicks
};

export default TourComponent;


/* Custom styles for the modal to make it full-screen */
.modal-body-fullscreen {
  width: 100vw;  /* Full viewport width */
  height: 100vh; /* Full viewport height */
  margin: 0;
  padding: 0;
  display: flex;
  justify-content: center;
  align-items: center;
}

.modal-body-fullscreen iframe {
  width: 100%;
  height: 100%;
  border: none; /* Removes border around iframe */
}

.vds-modal__content {
  width: 100vw !important;  /* Force modal content to full width */
  height: 100vh !important; /* Force modal content to full height */
  max-width: 100vw !important;
  max-height: 100vh !important;
  padding: 0 !important;    /* Remove any default padding */
  overflow: hidden;         /* Ensure modal content does not overflow */
}





----------------------

import React, { useState } from 'react';
import { DateRangePicker } from 'react-dates';
import 'react-dates/initialize';
import 'react-dates/lib/css/_datepicker.css';

const MyDateRangePicker = () => {
    const [startDate, setStartDate] = useState(null);
    const [endDate, setEndDate] = useState(null);
    const [focusedInput, setFocusedInput] = useState(null);

    return (
        <DateRangePicker
            startDate={startDate} 
            startDateId="your_unique_start_date_id" 
            endDate={endDate} 
            endDateId="your_unique_end_date_id" 
            onDatesChange={({ startDate, endDate }) => {
                setStartDate(startDate);
                setEndDate(endDate);
            }}
            focusedInput={focusedInput} 
            onFocusChange={focusedInput => setFocusedInput(focusedInput)} 
            isOutsideRange={() => false} // Allow all dates to be selectable
        />
    );
};

export default MyDateRangePicker;


--------------


import React, { useState } from 'react';
import { DateRangePicker } from 'rsuite';
import 'rsuite/dist/rsuite.min.css';
const DateRangePickerSingleInput = () => {
    const [dateRange, setDateRange] = useState([new Date(), new Date()]); // Initialize with today's date

  const handleChange = (value) => {
    // Only update state if value is valid
    if (value && value.length === 2) {
      setDateRange(value);
    } else {
      // If the value is cleared, set to an empty array
      setDateRange([null, null]);
    }
  };
  const disablePreviousDates = (date) => {
    const today = new Date();
    return date < today.setHours(0, 0, 0, 0); // Disable dates before today
  };

  return (
    <div>
      <h4>Select Date Range</h4>
      <DateRangePicker
        value={dateRange}
        onChange={handleChange}
        format="yyyy-MM-dd" // Customize the format as needed
        // Remove default static ranges
        ranges={[]} // This will remove all static ranges
        disabledDate={disablePreviousDates} // Disable previous dates
      />
      <div>
        <p>Selected Start Date: {dateRange[0] ? dateRange[0].toLocaleDateString() : 'None'}</p>
        <p>Selected End Date: {dateRange[1] ? dateRange[1].toLocaleDateString() : 'None'}</p>
      </div>
    </div>
  );
}
export default DateRangePickerSingleInput;

-----------------------
